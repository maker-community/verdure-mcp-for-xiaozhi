@page "/connections"
@attribute [Authorize]
@inject IXiaozhiConnectionClientService ServerService
@inject ISnackbar Snackbar
@inject NavigationManager Navigation
@inject IDialogService DialogService

<PageTitle>Xiaozhi Connections - Verdure MCP Platform</PageTitle>

<MudGrid>
    <!-- M3 Hero Banner - 蓝色背景 -->
    <MudItem xs="12">
        <MudCard Elevation="2" Style="background: linear-gradient(135deg, #1976D2 0%, #1565C0 100%); border-radius: 16px; overflow: hidden;" Class="m3-mb-xl">
            <MudCardContent Class="pa-6">
                <div class="d-flex justify-space-between align-center flex-wrap" Style="gap: 1rem;">
                    <div>
                        <MudText Typo="Typo.h4" Class="m3-mb-sm" Style="font-weight: 600; color: #FFFFFF;">
                            <MudIcon Icon="@Icons.Material.Outlined.Dns" Class="mr-2" Style="color: #FFFFFF;" /> Xiaozhi Connections
                        </MudText>
                        <MudText Typo="Typo.body1" Style="color: rgba(255, 255, 255, 0.85); font-weight: 400;">
                            Manage your Xiaozhi AI server connections
                        </MudText>
                    </div>
                    <MudButton Href="/connections/create" 
                              Variant="Variant.Filled" 
                              Style="background: #FFFFFF; color: #1976D2;"
                              StartIcon="@Icons.Material.Filled.Add"
                              Size="Size.Large"
                              Class="m3-button-lg">
                        Add Connection
                    </MudButton>
                </div>
            </MudCardContent>
        </MudCard>
    </MudItem>

    <!-- M3 表格容器 -->
    <MudItem xs="12">
        <MudCard Elevation="1" Class="m3-card">
            <MudCardContent>
                <MudTable Items="@_servers" 
                         Loading="@_loading" 
                         Hover="true" 
                         Breakpoint="Breakpoint.Sm"
                         Dense="false"
                         Elevation="0">
                    <ToolBarContent>
                        <MudText Typo="Typo.h6" Style="font-weight: 500;">Your Connections</MudText>
                        <MudSpacer />
                        <MudTextField @bind-Value="_searchString" 
                                     Placeholder="Search connections..." 
                                     Adornment="Adornment.Start" 
                                     AdornmentIcon="@Icons.Material.Outlined.Search" 
                                     IconSize="Size.Medium" 
                                     Variant="Variant.Outlined"
                                     Margin="Margin.Dense"
                                     Class="mt-0"
                                     Style="max-width: 300px;"
                                     Immediate="true"></MudTextField>
                    </ToolBarContent>
                    <HeaderContent>
                        <MudTh>Name</MudTh>
                        <MudTh>Address</MudTh>
                        <MudTh>Status</MudTh>
                        <MudTh>Bindings</MudTh>
                        <MudTh>Created</MudTh>
                        <MudTh>Actions</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        @if (string.IsNullOrWhiteSpace(_searchString) || 
                             context.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
                             context.Address.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
                        {
                            <MudTd DataLabel="Name">
                                <MudText Typo="Typo.body1" Style="font-weight: 500;">@context.Name</MudText>
                                @if (!string.IsNullOrWhiteSpace(context.Description))
                                {
                                    <MudText Typo="Typo.body2" Color="Color.Secondary">@context.Description</MudText>
                                }
                            </MudTd>
                            <MudTd DataLabel="Address">
                                <MudText Typo="Typo.body2" Style="font-family: monospace;">@context.Address</MudText>
                            </MudTd>
                            <MudTd DataLabel="Status">
                                <div class="d-flex align-center m3-gap-sm">
                                    @if (context.IsEnabled)
                                    {
                                        @if (context.IsConnected)
                                        {
                                            <MudChip T="string" 
                                                    Size="Size.Small" 
                                                    Variant="Variant.Filled"
                                                    Color="Color.Success" 
                                                    Icon="@Icons.Material.Filled.CheckCircle"
                                                    Class="m3-chip">
                                                Connected
                                            </MudChip>
                                        }
                                        else
                                        {
                                            <MudChip T="string" 
                                                    Size="Size.Small" 
                                                    Variant="Variant.Outlined"
                                                    Color="Color.Warning" 
                                                    Icon="@Icons.Material.Filled.Warning"
                                                    Class="m3-chip">
                                                Disconnected
                                            </MudChip>
                                        }
                                    }
                                    else
                                    {
                                        <MudChip T="string" 
                                                Size="Size.Small" 
                                                Variant="Variant.Text"
                                                Color="Color.Default" 
                                                Icon="@Icons.Material.Filled.PowerSettingsNew"
                                                Class="m3-chip"
                                                Style="opacity: 0.6;">
                                            Disabled
                                        </MudChip>
                                    }
                                </div>
                            </MudTd>
                            <MudTd DataLabel="Bindings">
                                <MudChip T="string" 
                                        Size="Size.Small" 
                                        Variant="Variant.Outlined"
                                        Color="Color.Info"
                                        Class="m3-chip">
                                    @context.ServiceBindings.Count binding(s)
                                </MudChip>
                            </MudTd>
                            <MudTd DataLabel="Created">
                                <MudText Typo="Typo.body2">@context.CreatedAt.ToString("MMM dd, yyyy")</MudText>
                            </MudTd>
                            <MudTd DataLabel="Actions">
                                <div class="d-flex m3-gap-xs">
                                    @if (context.IsEnabled)
                                    {
                                        <MudTooltip Text="Disable connection">
                                            <MudIconButton Icon="@Icons.Material.Outlined.PowerSettingsNew" 
                                                         Size="Size.Medium" 
                                                         Color="Color.Warning"
                                                         OnClick="@(() => DisableServer(context))"
                                                         Class="m3-icon-button" />
                                        </MudTooltip>
                                    }
                                    else
                                    {
                                        <MudTooltip Text="Enable connection">
                                            <MudIconButton Icon="@Icons.Material.Outlined.PlayArrow" 
                                                         Size="Size.Medium" 
                                                         Color="Color.Success"
                                                         OnClick="@(() => EnableServer(context))"
                                                         Class="m3-icon-button" />
                                        </MudTooltip>
                                    }
                                    <MudTooltip Text="Edit connection">
                                        <MudIconButton Icon="@Icons.Material.Outlined.Edit" 
                                                     Size="Size.Medium" 
                                                     Color="Color.Primary"
                                                     OnClick="@(() => EditServer(context.Id))"
                                                     Class="m3-icon-button" />
                                    </MudTooltip>
                                    <MudTooltip Text="View bindings">
                                        <MudIconButton Icon="@Icons.Material.Outlined.Link" 
                                                     Size="Size.Medium" 
                                                     Color="Color.Secondary"
                                                     OnClick="@(() => ViewBindings(context.Id))"
                                                     Class="m3-icon-button" />
                                    </MudTooltip>
                                    <MudTooltip Text="Delete connection">
                                        <MudIconButton Icon="@Icons.Material.Outlined.Delete" 
                                                     Size="Size.Medium" 
                                                     Color="Color.Error"
                                                     OnClick="@(() => DeleteServer(context))"
                                                     Class="m3-icon-button" />
                                    </MudTooltip>
                                </div>
                            </MudTd>
                        }
                    </RowTemplate>
                    <NoRecordsContent>
                        <!-- M3 空状态设计 -->
                        <div class="m3-empty-state">
                            <MudIcon Icon="@Icons.Material.Outlined.CloudOff" 
                                     Color="Color.Default" 
                                     Class="m3-empty-state-icon" />
                            <MudText Typo="Typo.h6" Class="m3-mb-sm" Style="font-weight: 500;">
                                No connections found
                            </MudText>
                            <MudText Typo="Typo.body2" Color="Color.Secondary" Class="m3-mb-lg">
                                @(_searchString?.Length > 0 
                                    ? "Try adjusting your search criteria" 
                                    : "Get started by creating your first Xiaozhi connection")
                            </MudText>
                            @if (string.IsNullOrEmpty(_searchString))
                            {
                                <MudButton Href="/connections/create" 
                                           Variant="Variant.Filled" 
                                           Color="Color.Primary" 
                                           StartIcon="@Icons.Material.Filled.Add"
                                           Class="m3-button">
                                    Create Connection
                                </MudButton>
                            }
                        </div>
                    </NoRecordsContent>
                    <LoadingContent>
                        <div class="pa-4">
                            <MudProgressLinear Color="Color.Primary" Indeterminate="true" />
                        </div>
                    </LoadingContent>
                </MudTable>
            </MudCardContent>
        </MudCard>
    </MudItem>
</MudGrid>

@code {
    private List<XiaozhiConnectionDto> _servers = new();
    private bool _loading = true;
    private string _searchString = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadServersAsync();
    }

    private async Task LoadServersAsync()
    {
        try
        {
            _loading = true;
            var servers = await ServerService.GetServersAsync();
            _servers = servers.ToList();
        }
        catch (HttpRequestException ex)
        {
            Snackbar.Add($"Error loading connections: {ex.Message}", Severity.Error);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Unexpected error: {ex.Message}", Severity.Error);
        }
        finally
        {
            _loading = false;
        }
    }

    private void EditServer(int id)
    {
        Navigation.NavigateTo($"/connections/edit/{id}");
    }

    private void ViewBindings(int id)
    {
        Navigation.NavigateTo($"/connections/{id}/service-bindings");
    }

    private async Task EnableServer(XiaozhiConnectionDto server)
    {
        try
        {
            await ServerService.EnableServerAsync(server.Id);
            
            // Reload server data from backend to ensure consistency
            var updatedServer = await ServerService.GetServerAsync(server.Id);
            if (updatedServer != null)
            {
                var index = _servers.FindIndex(s => s.Id == server.Id);
                if (index >= 0)
                {
                    _servers[index] = updatedServer;
                }
            }
            
            Snackbar.Add($"connection '{server.Name}' enabled", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error enabling server: {ex.Message}", Severity.Error);
        }
    }

    private async Task DisableServer(XiaozhiConnectionDto server)
    {
        try
        {
            await ServerService.DisableServerAsync(server.Id);
            
            // Reload server data from backend to ensure consistency
            var updatedServer = await ServerService.GetServerAsync(server.Id);
            if (updatedServer != null)
            {
                var index = _servers.FindIndex(s => s.Id == server.Id);
                if (index >= 0)
                {
                    _servers[index] = updatedServer;
                }
            }
            
            Snackbar.Add($"connection '{server.Name}' disabled", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error disabling server: {ex.Message}", Severity.Error);
        }
    }

    private async Task DeleteServer(XiaozhiConnectionDto server)
    {
        var parameters = new DialogParameters<DeleteConfirmationDialog>
        {
            { x => x.ContentText, $"Are you sure you want to delete the connection '{server.Name}'? This action cannot be undone." },
            { x => x.ButtonText, "Delete" },
            { x => x.Color, Color.Error }
        };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small };
        var dialog = await DialogService.ShowAsync<DeleteConfirmationDialog>("Confirm Delete", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            try
            {
                await ServerService.DeleteServerAsync(server.Id);
                _servers.Remove(server);
                Snackbar.Add($"connection '{server.Name}' deleted successfully", Severity.Success);
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error deleting server: {ex.Message}", Severity.Error);
            }
        }
    }
}
