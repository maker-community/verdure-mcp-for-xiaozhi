@page "/connections"
@attribute [Authorize]
@inject IXiaozhiConnectionClientService ServerService
@inject ISnackbar Snackbar
@inject NavigationManager Navigation
@inject IDialogService DialogService

<PageTitle>Xiaozhi Connections - Verdure MCP Platform</PageTitle>

<MudGrid>
    <MudItem xs="12">
        <div class="d-flex justify-space-between align-center mb-4">
            <MudText Typo="Typo.h3">
                <MudIcon Icon="@Icons.Material.Filled.Dns" Class="mr-2" /> Xiaozhi Connections
            </MudText>
            <MudButton Href="/connections/create" 
                      Variant="Variant.Filled" 
                      Color="Color.Primary" 
                      StartIcon="@Icons.Material.Filled.Add">
                Add Connection
            </MudButton>
        </div>
    </MudItem>

    <MudItem xs="12">
        <MudCard Elevation="2">
            <MudCardContent>
                <MudTable Items="@_servers" 
                         Loading="@_loading" 
                         Hover="true" 
                         Breakpoint="Breakpoint.Sm"
                         Dense="true">
                    <ToolBarContent>
                        <MudText Typo="Typo.h6">Your Xiaozhi Connections</MudText>
                        <MudSpacer />
                        <MudTextField @bind-Value="_searchString" 
                                     Placeholder="Search connections..." 
                                     Adornment="Adornment.Start" 
                                     AdornmentIcon="@Icons.Material.Filled.Search" 
                                     IconSize="Size.Medium" 
                                     Class="mt-0"
                                     Immediate="true"></MudTextField>
                    </ToolBarContent>
                    <HeaderContent>
                        <MudTh>Name</MudTh>
                        <MudTh>Address</MudTh>
                        <MudTh>Status</MudTh>
                        <MudTh>Bindings</MudTh>
                        <MudTh>Created</MudTh>
                        <MudTh>Actions</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        @if (string.IsNullOrWhiteSpace(_searchString) || 
                             context.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
                             context.Address.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
                        {
                            <MudTd DataLabel="Name">
                                <MudText Typo="Typo.body1" Style="font-weight: 500;">@context.Name</MudText>
                                @if (!string.IsNullOrWhiteSpace(context.Description))
                                {
                                    <MudText Typo="Typo.body2" Color="Color.Secondary">@context.Description</MudText>
                                }
                            </MudTd>
                            <MudTd DataLabel="Address">
                                <MudText Typo="Typo.body2" Style="font-family: monospace;">@context.Address</MudText>
                            </MudTd>
                            <MudTd DataLabel="Status">
                                <div class="d-flex align-center gap-2">
                                    @if (context.IsEnabled)
                                    {
                                        @if (context.IsConnected)
                                        {
                                            <MudChip T="string" Size="Size.Small" Color="Color.Success" Icon="@Icons.Material.Filled.CheckCircle">
                                                Connected
                                            </MudChip>
                                        }
                                        else
                                        {
                                            <MudChip T="string" Size="Size.Small" Color="Color.Warning" Icon="@Icons.Material.Filled.Warning">
                                                Disconnected
                                            </MudChip>
                                        }
                                    }
                                    else
                                    {
                                        <MudChip T="string" Size="Size.Small" Color="Color.Default" Icon="@Icons.Material.Filled.PowerSettingsNew">
                                            Disabled
                                        </MudChip>
                                    }
                                </div>
                            </MudTd>
                            <MudTd DataLabel="Bindings">
                                <MudChip T="string" Size="Size.Small" Color="Color.Info">
                                    @context.ServiceBindings.Count binding(s)
                                </MudChip>
                            </MudTd>
                            <MudTd DataLabel="Created">
                                <MudText Typo="Typo.body2">@context.CreatedAt.ToString("MMM dd, yyyy")</MudText>
                            </MudTd>
                            <MudTd DataLabel="Actions">
                                @if (context.IsEnabled)
                                {
                                    <MudIconButton Icon="@Icons.Material.Filled.PowerSettingsNew" 
                                                 Size="Size.Small" 
                                                 Color="Color.Warning"
                                                 OnClick="@(() => DisableServer(context))" 
                                                 Title="Disable Connection" />
                                }
                                else
                                {
                                    <MudIconButton Icon="@Icons.Material.Filled.PlayArrow" 
                                                 Size="Size.Small" 
                                                 Color="Color.Success"
                                                 OnClick="@(() => EnableServer(context))" 
                                                 Title="Enable Connection" />
                                }
                                <MudIconButton Icon="@Icons.Material.Filled.Edit" 
                                             Size="Size.Small" 
                                             Color="Color.Primary"
                                             OnClick="@(() => EditServer(context.Id))" 
                                             Title="Edit" />
                                <MudIconButton Icon="@Icons.Material.Filled.Link" 
                                             Size="Size.Small" 
                                             Color="Color.Secondary"
                                             OnClick="@(() => ViewBindings(context.Id))" 
                                             Title="View Bindings" />
                                <MudIconButton Icon="@Icons.Material.Filled.Delete" 
                                             Size="Size.Small" 
                                             Color="Color.Error"
                                             OnClick="@(() => DeleteServer(context))" 
                                             Title="Delete" />
                            </MudTd>
                        }
                    </RowTemplate>
                    <NoRecordsContent>
                        <MudAlert Severity="Severity.Info" Class="my-4">
                            No connections found. Click "Add Connection" to create your first Xiaozhi connection!
                        </MudAlert>
                    </NoRecordsContent>
                    <LoadingContent>
                        <MudProgressLinear Color="Color.Primary" Indeterminate="true" />
                    </LoadingContent>
                </MudTable>
            </MudCardContent>
        </MudCard>
    </MudItem>
</MudGrid>

@code {
    private List<XiaozhiConnectionDto> _servers = new();
    private bool _loading = true;
    private string _searchString = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadServersAsync();
    }

    private async Task LoadServersAsync()
    {
        try
        {
            _loading = true;
            var servers = await ServerService.GetServersAsync();
            _servers = servers.ToList();
        }
        catch (HttpRequestException ex)
        {
            Snackbar.Add($"Error loading connections: {ex.Message}", Severity.Error);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Unexpected error: {ex.Message}", Severity.Error);
        }
        finally
        {
            _loading = false;
        }
    }

    private void EditServer(int id)
    {
        Navigation.NavigateTo($"/connections/edit/{id}");
    }

    private void ViewBindings(int id)
    {
        Navigation.NavigateTo($"/connections/{id}/service-bindings");
    }

    private async Task EnableServer(XiaozhiConnectionDto server)
    {
        try
        {
            await ServerService.EnableServerAsync(server.Id);
            
            // Reload server data from backend to ensure consistency
            var updatedServer = await ServerService.GetServerAsync(server.Id);
            if (updatedServer != null)
            {
                var index = _servers.FindIndex(s => s.Id == server.Id);
                if (index >= 0)
                {
                    _servers[index] = updatedServer;
                }
            }
            
            Snackbar.Add($"connection '{server.Name}' enabled", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error enabling server: {ex.Message}", Severity.Error);
        }
    }

    private async Task DisableServer(XiaozhiConnectionDto server)
    {
        try
        {
            await ServerService.DisableServerAsync(server.Id);
            
            // Reload server data from backend to ensure consistency
            var updatedServer = await ServerService.GetServerAsync(server.Id);
            if (updatedServer != null)
            {
                var index = _servers.FindIndex(s => s.Id == server.Id);
                if (index >= 0)
                {
                    _servers[index] = updatedServer;
                }
            }
            
            Snackbar.Add($"connection '{server.Name}' disabled", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error disabling server: {ex.Message}", Severity.Error);
        }
    }

    private async Task DeleteServer(XiaozhiConnectionDto server)
    {
        var parameters = new DialogParameters<DeleteConfirmationDialog>
        {
            { x => x.ContentText, $"Are you sure you want to delete the connection '{server.Name}'? This action cannot be undone." },
            { x => x.ButtonText, "Delete" },
            { x => x.Color, Color.Error }
        };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small };
        var dialog = await DialogService.ShowAsync<DeleteConfirmationDialog>("Confirm Delete", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            try
            {
                await ServerService.DeleteServerAsync(server.Id);
                _servers.Remove(server);
                Snackbar.Add($"connection '{server.Name}' deleted successfully", Severity.Success);
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error deleting server: {ex.Message}", Severity.Error);
            }
        }
    }
}
