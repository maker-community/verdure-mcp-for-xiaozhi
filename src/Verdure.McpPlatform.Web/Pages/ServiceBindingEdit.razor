@page "/service-bindings/create"
@page "/service-bindings/edit/{Id:int}"
@attribute [Authorize]
@inject IMcpServiceBindingClientService BindingService
@inject IXiaozhiConnectionClientService ServerService
@inject ISnackbar Snackbar
@inject NavigationManager Navigation

<PageTitle>@(_isEdit ? "Edit" : "Create") Service Binding - Verdure MCP Platform</PageTitle>

<MudGrid>
    <MudItem xs="12">
        <MudText Typo="Typo.h3" Class="mb-4">
            <MudIcon Icon="@(_isEdit ? Icons.Material.Filled.Edit : Icons.Material.Filled.Add)" Class="mr-2" />
            @(_isEdit ? "Edit" : "Create") MCP Service Binding
        </MudText>
    </MudItem>

    <MudItem xs="12" md="8" lg="6">
        <MudCard Elevation="2">
            <MudCardContent>
                <MudForm @ref="_form" @bind-IsValid="@_formValid">
                    @if (!_isEdit)
                    {
                        <MudSelect @bind-Value="_model.XiaozhiConnectionId" 
                                  Label="Xiaozhi Connection" 
                                  Required="true"
                                  RequiredError="Please select a Xiaozhi connection"
                                  Variant="Variant.Outlined"
                                  Margin="Margin.Dense"
                                  Class="mb-4">
                            @foreach (var server in _servers)
                            {
                                <MudSelectItem Value="@server.Id">@server.Name</MudSelectItem>
                            }
                        </MudSelect>
                    }

                    <MudTextField @bind-Value="_model.ServiceName" 
                                 Label="Service Name" 
                                 Required="true"
                                 RequiredError="Service name is required"
                                 Variant="Variant.Outlined"
                                 Margin="Margin.Dense"
                                 HelperText="Name of the external MCP service"
                                 Class="mb-4" />

                    <MudTextField @bind-Value="_model.NodeAddress" 
                                 Label="MCP Service Endpoint" 
                                 Required="true"
                                 RequiredError="MCP Service Endpoint is required"
                                 Variant="Variant.Outlined"
                                 Margin="Margin.Dense"
                                 HelperText="e.g., http://localhost:5000/calculator or https://mcp.example.com/weather"
                                 Class="mb-4" />

                    <MudTextField @bind-Value="_model.Description" 
                                 Label="Description" 
                                 Lines="3"
                                 Variant="Variant.Outlined"
                                 Margin="Margin.Dense"
                                 HelperText="Optional description for this service binding"
                                 Class="mb-4" />
                </MudForm>
            </MudCardContent>
            <MudCardActions>
                <MudButton Variant="Variant.Text" 
                          Color="Color.Default" 
                          OnClick="Cancel">
                    Cancel
                </MudButton>
                <MudSpacer />
                <MudButton Variant="Variant.Filled" 
                          Color="Color.Primary" 
                          OnClick="SaveAsync" 
                          Disabled="@(!_formValid || _saving)"
                          StartIcon="@Icons.Material.Filled.Save">
                    @if (_saving)
                    {
                        <MudProgressCircular Class="mr-2" Size="Size.Small" Indeterminate="true" />
                        <MudText>Saving...</MudText>
                    }
                    else
                    {
                        <MudText>Save</MudText>
                    }
                </MudButton>
            </MudCardActions>
        </MudCard>
    </MudItem>

    @if (_isEdit && _existingBinding != null)
    {
        <MudItem xs="12" md="8" lg="6">
            <MudCard Elevation="2">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">Service Binding Information</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudGrid>
                        <MudItem xs="6">
                            <MudText Typo="Typo.body2" Color="Color.Secondary">Status</MudText>
                            @if (_existingBinding.IsActive)
                            {
                                <MudChip T="string" Size="Size.Small" Color="Color.Success" Icon="@Icons.Material.Filled.CheckCircle">
                                    Active
                                </MudChip>
                            }
                            else
                            {
                                <MudChip T="string" Size="Size.Small" Color="Color.Default" Icon="@Icons.Material.Filled.PauseCircle">
                                    Inactive
                                </MudChip>
                            }
                        </MudItem>
                        <MudItem xs="6">
                            <MudText Typo="Typo.body2" Color="Color.Secondary">Created</MudText>
                            <MudText Typo="Typo.body1">@_existingBinding.CreatedAt.ToString("MMM dd, yyyy HH:mm")</MudText>
                        </MudItem>
                        @if (_existingBinding.UpdatedAt.HasValue)
                        {
                            <MudItem xs="6">
                                <MudText Typo="Typo.body2" Color="Color.Secondary">Last Updated</MudText>
                                <MudText Typo="Typo.body1">@_existingBinding.UpdatedAt.Value.ToString("MMM dd, yyyy HH:mm")</MudText>
                            </MudItem>
                        }
                    </MudGrid>
                </MudCardContent>
            </MudCard>
        </MudItem>
    }
</MudGrid>

@code {
    [Parameter]
    public int Id { get; set; }

    [SupplyParameterFromQuery]
    public int? ServerId { get; set; }

    private MudForm _form = null!;
    private bool _formValid;
    private bool _saving;
    private bool _isEdit => Id > 0;
    private McpServiceBindingDto? _existingBinding;
    private List<XiaozhiConnectionDto> _servers = new();
    
    private BindingFormModel _model = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadServersAsync();
        
        if (_isEdit)
        {
            await LoadBindingAsync();
        }
        else if (ServerId.HasValue)
        {
            _model.XiaozhiConnectionId = ServerId.Value;
        }
    }

    private async Task LoadServersAsync()
    {
        try
        {
            var servers = await ServerService.GetServersAsync();
            _servers = servers.ToList();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading connections: {ex.Message}", Severity.Error);
        }
    }

    private async Task LoadBindingAsync()
    {
        try
        {
            _existingBinding = await BindingService.GetBindingAsync(Id);
            if (_existingBinding != null)
            {
                _model.XiaozhiConnectionId = _existingBinding.XiaozhiConnectionId;
                _model.ServiceName = _existingBinding.ServiceName;
                _model.NodeAddress = _existingBinding.NodeAddress;
                _model.Description = _existingBinding.Description ?? string.Empty;
            }
            else
            {
                Snackbar.Add("Binding not found", Severity.Error);
                Navigation.NavigateTo("/service-bindings");
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading binding: {ex.Message}", Severity.Error);
            Navigation.NavigateTo("/service-bindings");
        }
    }

    private async Task SaveAsync()
    {
        if (!_formValid)
            return;

        try
        {
            _saving = true;

            if (_isEdit)
            {
                var request = new UpdateMcpServiceBindingRequest
                {
                    ServiceName = _model.ServiceName,
                    NodeAddress = _model.NodeAddress,
                    Description = _model.Description
                };
                await BindingService.UpdateBindingAsync(Id, request);
                Snackbar.Add("Service binding updated successfully", Severity.Success);
            }
            else
            {
                var request = new CreateMcpServiceBindingRequest
                {
                    ServerId = _model.XiaozhiConnectionId,
                    ServiceName = _model.ServiceName,
                    NodeAddress = _model.NodeAddress,
                    Description = _model.Description
                };
                await BindingService.CreateBindingAsync(request);
                Snackbar.Add("Service binding created successfully", Severity.Success);
            }

            Navigation.NavigateTo(_model.XiaozhiConnectionId > 0 
                ? $"/connections/{_model.XiaozhiConnectionId}/service-bindings" 
                : "/service-bindings");
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error saving binding: {ex.Message}", Severity.Error);
        }
        finally
        {
            _saving = false;
        }
    }

    private void Cancel()
    {
        Navigation.NavigateTo(_model.XiaozhiConnectionId > 0 
            ? $"/connections/{_model.XiaozhiConnectionId}/service-bindings" 
            : "/service-bindings");
    }

    private class BindingFormModel
    {
        public int XiaozhiConnectionId { get; set; }
        public string ServiceName { get; set; } = string.Empty;
        public string NodeAddress { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
    }
}
