
@page "/service-bindings/create"
@page "/service-bindings/edit/{Id}"
@attribute [Authorize]
@inject IMcpServiceBindingClientService BindingService
@inject IXiaozhiConnectionClientService ServerService
@inject IMcpServiceConfigClientService McpServiceConfigService
@inject ISnackbar Snackbar
@inject NavigationManager Navigation
@using Microsoft.Extensions.Localization
@using Verdure.McpPlatform.Web.Resources
@inject IStringLocalizer<SharedResources> Loc

<PageTitle>@(_isEdit ? Loc["EditServiceBinding"] : Loc["CreateServiceBinding"]) @Loc["McpServiceBinding"] - @Loc["AppTitle"]</PageTitle>

<MudGrid>
    <!-- M3 Hero Banner - 统一蓝色渐变 -->
    <MudItem xs="12">
        <MudCard Elevation="2" Style="background: linear-gradient(135deg, #1976D2 0%, #1565C0 100%); border-radius: 16px; overflow: hidden;" Class="m3-mb-xl">
            <MudCardContent Class="pa-6">
                <div class="d-flex align-center mb-2">
                    <MudIcon Icon="@(_isEdit ? Icons.Material.Filled.Edit : Icons.Material.Filled.Add)" Size="Size.Large" Style="color: #FFFFFF; margin-right: 12px;" />
                    <MudText Typo="Typo.h4" Style="color: #FFFFFF; font-weight: 600; margin: 0;">
                        @(_isEdit ? Loc["EditServiceBinding"] : Loc["CreateServiceBinding"]) @Loc["McpServiceBinding"]
                    </MudText>
                </div>
                <MudText Typo="Typo.body1" Style="color: rgba(255, 255, 255, 0.85); margin-left: 48px;">
                    @(_isEdit ? Loc["UpdateServiceBindingConfig"] : Loc["ConfigureNewServiceBinding"])
                </MudText>
            </MudCardContent>
        </MudCard>
    </MudItem>

    <MudItem xs="12" md="8" lg="6">
        <MudCard Elevation="2">
            <MudCardContent>
                <MudForm @ref="_form" @bind-IsValid="@_formValid">
                    @if (!_isEdit)
                    {
                        <MudSelect @bind-Value="_model.XiaozhiConnectionId" 
                                  Label="@Loc["XiaozhiConnection"]" 
                                  Required="true"
                                  RequiredError="@Loc["SelectXiaozhiConnection"]"
                                  Variant="Variant.Outlined"
                                  Margin="Margin.Dense"
                                  Class="mb-4">
                            @foreach (var server in _servers)
                            {
                                <MudSelectItem Value="@server.Id">@server.Name</MudSelectItem>
                            }
                        </MudSelect>
                    }

                    <MudSelect Value="_model.McpServiceConfigId" 
                              ValueChanged="@OnMcpServiceChanged"
                              Label="@Loc["SelectMcpService"]" 
                              Variant="Variant.Outlined"
                              Margin="Margin.Dense"
                              HelperText="@Loc["SelectMcpServiceHelp"]"
                              Class="mb-4"
                              Required="true"
                              RequiredError="@Loc["SelectMcpServiceRequired"]"
                              T="string">
                        @if (_myServices.Any())
                        {
                            <MudListSubheader>@Loc["MyServices"]</MudListSubheader>
                            @foreach (var service in _myServices)
                            {
                                <MudSelectItem Value="@service.Id">@service.Name</MudSelectItem>
                            }
                        }
                        @if (_publicServices.Any())
                        {
                            <MudListSubheader>@Loc["PublicServices"]</MudListSubheader>
                            @foreach (var service in _publicServices)
                            {
                                <MudSelectItem Value="@service.Id">@service.Name (@Loc["Public"])</MudSelectItem>
                            }
                        }
                    </MudSelect>

                    @if (!string.IsNullOrEmpty(_model.McpServiceConfigId))
                    {
                        @if (_loadingTools)
                        {
                            <div class="mb-4">
                                <MudProgressLinear Indeterminate="true" Color="Color.Primary" />
                                <MudText Typo="Typo.caption" Color="Color.Secondary">@Loc["LoadingTools"]</MudText>
                            </div>
                        }
                        else if (_availableTools.Any())
                        {
                            <MudText Typo="Typo.subtitle2" Class="mb-2">@Loc["SelectTools"]</MudText>
                            <MudText Typo="Typo.caption" Color="Color.Secondary" Class="mb-2">@Loc["SelectToolsHelp"]</MudText>
                            <MudPaper Elevation="0" Outlined="true" Class="pa-3 mb-4" Style="max-height: 300px; overflow-y: auto;">
                                @foreach (var tool in _availableTools)
                                {
                                    var toolName = tool.Name; // Capture for closure
                                    <MudCheckBox T="bool" 
                                                Value="@_selectedTools.Contains(toolName)"
                                                ValueChanged="@((bool isChecked) => ToggleTool(toolName, isChecked))"
                                                Color="Color.Primary"
                                                Dense="true">
                                        <MudText Typo="Typo.body2">@tool.Name</MudText>
                                        @if (!string.IsNullOrEmpty(tool.Description))
                                        {
                                            <MudText Typo="Typo.caption" Color="Color.Secondary">@tool.Description</MudText>
                                        }
                                    </MudCheckBox>
                                }
                            </MudPaper>
                            <MudText Typo="Typo.caption" Color="Color.Secondary" Class="mb-4">
                                @string.Format(Loc["SelectedTools"], _selectedTools.Count)
                            </MudText>
                        }
                        else
                        {
                            <MudAlert Severity="Severity.Info" Class="mb-4">@Loc["NoToolsAvailable"]</MudAlert>
                        }
                    }

                    @if (!string.IsNullOrEmpty(_model.McpServiceConfigId) && _selectedService != null)
                    {
                        <MudPaper Elevation="0" Outlined="true" Class="pa-3 mb-4">
                            <MudText Typo="Typo.caption" Color="Color.Secondary">@Loc["SelectedServiceInfo"]</MudText>
                            <MudText Typo="Typo.body2" Class="mt-1"><strong>@Loc["ServiceName"]:</strong> @_selectedService.Name</MudText>
                            <MudText Typo="Typo.body2"><strong>@Loc["Endpoint"]:</strong> @_selectedService.Endpoint</MudText>
                            <MudText Typo="Typo.body2"><strong>@Loc["Protocol"]:</strong> @(_selectedService.Protocol ?? "http")</MudText>
                        </MudPaper>
                    }

                    <MudTextField @bind-Value="_model.Description" 
                                 Label="@Loc["Description"]" 
                                 Lines="3"
                                 Variant="Variant.Outlined"
                                 Margin="Margin.Dense"
                                 HelperText="@Loc["ServiceBindingDescriptionOptional"]"
                                 Class="mb-4" />
                </MudForm>
            </MudCardContent>
            <MudCardActions>
                <MudButton Variant="Variant.Text" 
                          Color="Color.Default" 
                          OnClick="Cancel">
                    @Loc["Cancel"]
                </MudButton>
                <MudSpacer />
                <MudButton Variant="Variant.Filled" 
                          Color="Color.Primary" 
                          OnClick="SaveAsync" 
                          Disabled="@(!_formValid || _saving)"
                          StartIcon="@Icons.Material.Filled.Save">
                    @if (_saving)
                    {
                        <MudProgressCircular Class="mr-2" Size="Size.Small" Indeterminate="true" />
                        <MudText>@Loc["Saving"]</MudText>
                    }
                    else
                    {
                        <MudText>@Loc["Save"]</MudText>
                    }
                </MudButton>
            </MudCardActions>
        </MudCard>
    </MudItem>

    @if (_isEdit && _existingBinding != null)
    {
        <MudItem xs="12" md="8" lg="6">
            <MudCard Elevation="2">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">@Loc["ServiceBindingInformation"]</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudGrid>
                        <MudItem xs="6">
                            <MudText Typo="Typo.body2" Color="Color.Secondary">@Loc["Status"]</MudText>
                            @if (_existingBinding.IsActive)
                            {
                                <MudChip T="string" Size="Size.Small" Color="Color.Success" Icon="@Icons.Material.Filled.CheckCircle">
                                    @Loc["Active"]
                                </MudChip>
                            }
                            else
                            {
                                <MudChip T="string" Size="Size.Small" Color="Color.Default" Icon="@Icons.Material.Filled.PauseCircle">
                                    @Loc["Inactive"]
                                </MudChip>
                            }
                        </MudItem>
                        <MudItem xs="6">
                            <MudText Typo="Typo.body2" Color="Color.Secondary">@Loc["Created"]</MudText>
                            <MudText Typo="Typo.body1">@_existingBinding.CreatedAt.ToString("MMM dd, yyyy HH:mm")</MudText>
                        </MudItem>
                        @if (_existingBinding.UpdatedAt.HasValue)
                        {
                            <MudItem xs="6">
                                <MudText Typo="Typo.body2" Color="Color.Secondary">@Loc["LastUpdated"]</MudText>
                                <MudText Typo="Typo.body1">@_existingBinding.UpdatedAt.Value.ToString("MMM dd, yyyy HH:mm")</MudText>
                            </MudItem>
                        }
                    </MudGrid>
                </MudCardContent>
            </MudCard>
        </MudItem>
    }
</MudGrid>

@code {
    [Parameter]
    public string? Id { get; set; }

    [SupplyParameterFromQuery]
    public string? ServerId { get; set; }

    private MudForm _form = null!;
    private bool _formValid;
    private bool _saving;
    private bool _isEdit => !string.IsNullOrEmpty(Id);
    private McpServiceBindingDto? _existingBinding;
    private List<XiaozhiConnectionDto> _servers = new();
    private List<McpServiceConfigDto> _myServices = new();
    private List<McpServiceConfigDto> _publicServices = new();
    private List<McpToolDto> _availableTools = new();
    private HashSet<string> _selectedTools = new();
    private bool _loadingTools = false;
    private McpServiceConfigDto? _selectedService;
    private string? _lastLoadedServiceId;  // Track which service's tools are currently loaded
    
    private BindingFormModel _model = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadServersAsync();
        await LoadMcpServicesAsync();
        
        if (_isEdit)
        {
            await LoadBindingAsync();
        }
        else if (!string.IsNullOrEmpty(ServerId))
        {
            _model.XiaozhiConnectionId = ServerId;
        }
    }

    private async Task LoadServersAsync()
    {
        try
        {
            var servers = await ServerService.GetServersAsync();
            _servers = servers.ToList();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading connections: {ex.Message}", Severity.Error);
        }
    }

    private async Task LoadMcpServicesAsync()
    {
        try
        {
            var myServices = await McpServiceConfigService.GetServicesAsync();
            _myServices = myServices.ToList();
            
            var publicServices = await McpServiceConfigService.GetPublicServicesAsync();
            _publicServices = publicServices.ToList();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading MCP services: {ex.Message}", Severity.Error);
        }
    }

    private async Task OnMcpServiceChanged(string? serviceId)
    {
        _model.McpServiceConfigId = serviceId;
        
        if (string.IsNullOrEmpty(serviceId))
        {
            _selectedService = null;
            _availableTools.Clear();
            _selectedTools.Clear();
            return;
        }

        // Find the selected service from both lists
        _selectedService = _myServices.FirstOrDefault(s => s.Id == serviceId) 
                          ?? _publicServices.FirstOrDefault(s => s.Id == serviceId);

        if (_selectedService != null)
        {
            // Auto-fill service name and endpoint from the selected MCP service config
            _model.ServiceName = _selectedService.Name;
            _model.NodeAddress = _selectedService.Endpoint;
        }

        await LoadToolsForSelectedService();
    }

    private async Task LoadToolsForSelectedService()
    {
        if (string.IsNullOrEmpty(_model.McpServiceConfigId))
        {
            _availableTools.Clear();
            _selectedTools.Clear();
            _lastLoadedServiceId = null;
            Console.WriteLine("[DEBUG] LoadTools: Service cleared");
            return;
        }

        try
        {
            _loadingTools = true;
            Console.WriteLine($"[DEBUG] LoadTools: Loading tools for service {_model.McpServiceConfigId}");
            var tools = await McpServiceConfigService.GetToolsAsync(_model.McpServiceConfigId);
            _availableTools = tools.ToList();
            Console.WriteLine($"[DEBUG] LoadTools: Loaded {_availableTools.Count} tools");
            
            // Determine if we should clear selected tools
            bool shouldClearSelection = false;
            
            if (_isEdit && _existingBinding?.McpServiceConfigId == _model.McpServiceConfigId)
            {
                // Editing mode: restore previously saved tool selections
                _selectedTools = _existingBinding.SelectedToolNames.ToHashSet();
                shouldClearSelection = false;
                Console.WriteLine($"[DEBUG] LoadTools: Edit mode - restored {_selectedTools.Count} tools");
            }
            else if (_lastLoadedServiceId != null && _lastLoadedServiceId != _model.McpServiceConfigId)
            {
                // Service changed: clear previous selections
                shouldClearSelection = true;
                Console.WriteLine($"[DEBUG] LoadTools: Service changed from {_lastLoadedServiceId} to {_model.McpServiceConfigId}");
            }
            else
            {
                Console.WriteLine($"[DEBUG] LoadTools: First load, current selections: {_selectedTools.Count}");
            }
            // else: first load in create mode, keep empty _selectedTools
            
            if (shouldClearSelection)
            {
                Console.WriteLine($"[DEBUG] LoadTools: Clearing {_selectedTools.Count} selected tools");
                _selectedTools.Clear();
            }
            
            // Remember which service we loaded
            _lastLoadedServiceId = _model.McpServiceConfigId;
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading tools: {ex.Message}", Severity.Error);
            _availableTools.Clear();
        }
        finally
        {
            _loadingTools = false;
        }
    }

    private void ToggleTool(string toolName, bool isChecked)
    {
        Console.WriteLine($"[DEBUG] ToggleTool called: {toolName}, isChecked={isChecked}, Before count: {_selectedTools.Count}");
        
        if (isChecked)
        {
            _selectedTools.Add(toolName);
            Console.WriteLine($"[DEBUG] Tool added: {toolName}, After count: {_selectedTools.Count}");
        }
        else
        {
            _selectedTools.Remove(toolName);
            Console.WriteLine($"[DEBUG] Tool removed: {toolName}, After count: {_selectedTools.Count}");
        }
        
        // Force UI update
        StateHasChanged();
    }

    private async Task LoadBindingAsync()
    {
        try
        {
            _existingBinding = await BindingService.GetBindingAsync(Id!);
            if (_existingBinding != null)
            {
                _model.XiaozhiConnectionId = _existingBinding.XiaozhiConnectionId;
                _model.ServiceName = _existingBinding.ServiceName;
                _model.NodeAddress = _existingBinding.NodeAddress;
                _model.Description = _existingBinding.Description ?? string.Empty;
                _model.McpServiceConfigId = _existingBinding.McpServiceConfigId;
                
                // Load selected service and tools
                if (!string.IsNullOrEmpty(_model.McpServiceConfigId))
                {
                    _selectedService = _myServices.FirstOrDefault(s => s.Id == _model.McpServiceConfigId) 
                                      ?? _publicServices.FirstOrDefault(s => s.Id == _model.McpServiceConfigId);
                    await LoadToolsForSelectedService();
                }
            }
            else
            {
                Snackbar.Add("Binding not found", Severity.Error);
                Navigation.NavigateTo("/service-bindings");
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading binding: {ex.Message}", Severity.Error);
            Navigation.NavigateTo("/service-bindings");
        }
    }

    private async Task SaveAsync()
    {
        if (!_formValid)
            return;

        try
        {
            _saving = true;

            // Debug: Check what we're about to save
            var toolsList = _selectedTools.ToList();
            Console.WriteLine($"[DEBUG] Saving binding with {toolsList.Count} tools: {string.Join(", ", toolsList)}");

            if (_isEdit)
            {
                var request = new UpdateMcpServiceBindingRequest
                {
                    ServiceName = _model.ServiceName,
                    NodeAddress = _model.NodeAddress,
                    Description = _model.Description,
                    McpServiceConfigId = _model.McpServiceConfigId,
                    SelectedToolNames = toolsList
                };
                Console.WriteLine($"[DEBUG] Update request: ServiceName={request.ServiceName}, Tools={request.SelectedToolNames?.Count ?? 0}");
                await BindingService.UpdateBindingAsync(Id!, request);
                Snackbar.Add("Service binding updated successfully", Severity.Success);
            }
            else
            {
                var request = new CreateMcpServiceBindingRequest
                {
                    ServerId = _model.XiaozhiConnectionId,
                    ServiceName = _model.ServiceName,
                    NodeAddress = _model.NodeAddress,
                    Description = _model.Description,
                    McpServiceConfigId = _model.McpServiceConfigId,
                    SelectedToolNames = toolsList
                };
                Console.WriteLine($"[DEBUG] Create request: ServiceName={request.ServiceName}, Tools={request.SelectedToolNames?.Count ?? 0}");
                await BindingService.CreateBindingAsync(request);
                Snackbar.Add("Service binding created successfully", Severity.Success);
            }

            // Always redirect to the main service bindings page
            Navigation.NavigateTo("/service-bindings");
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error saving binding: {ex.Message}", Severity.Error);
        }
        finally
        {
            _saving = false;
        }
    }

    private void Cancel()
    {
        // Always redirect to the main service bindings page
        Navigation.NavigateTo("/service-bindings");
    }

    private class BindingFormModel
    {
        public string XiaozhiConnectionId { get; set; } = string.Empty;
        public string ServiceName { get; set; } = string.Empty;
        public string NodeAddress { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public string? McpServiceConfigId { get; set; }
    }
}
