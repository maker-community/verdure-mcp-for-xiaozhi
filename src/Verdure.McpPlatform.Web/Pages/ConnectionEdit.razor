
@page "/connections/create"
@page "/connections/edit/{Id:int}"
@attribute [Authorize]
@inject IXiaozhiConnectionClientService ServerService
@inject ISnackbar Snackbar
@inject NavigationManager Navigation
@using Microsoft.Extensions.Localization
@using Verdure.McpPlatform.Web.Resources
@inject IStringLocalizer<SharedResources> Loc

<PageTitle>@(_isEdit ? Loc["EditConnection"] : Loc["CreateConnection"]) @Loc["XiaozhiConnection"] - @Loc["AppTitle"]</PageTitle>

<MudGrid>
    <!-- M3 Hero Banner - 统一蓝色渐变 -->
    <MudItem xs="12">
        <MudCard Elevation="2" Style="background: linear-gradient(135deg, #1976D2 0%, #1565C0 100%); border-radius: 16px; overflow: hidden;" Class="m3-mb-xl">
            <MudCardContent Class="pa-6">
                <div class="d-flex align-center mb-2">
                    <MudIcon Icon="@(_isEdit ? Icons.Material.Filled.Edit : Icons.Material.Filled.Add)" Size="Size.Large" Style="color: #FFFFFF; margin-right: 12px;" />
                    <MudText Typo="Typo.h4" Style="color: #FFFFFF; font-weight: 600; margin: 0;">
                        @(_isEdit ? Loc["EditConnection"] : Loc["CreateConnection"]) @Loc["XiaozhiConnection"]
                    </MudText>
                </div>
                <MudText Typo="Typo.body1" Style="color: rgba(255, 255, 255, 0.85); margin-left: 48px;">
                    @(_isEdit ? Loc["UpdateConnectionSettings"] : Loc["AddNewConnection"])
                </MudText>
            </MudCardContent>
        </MudCard>
    </MudItem>

    <MudItem xs="12" md="8" lg="6">
        <MudCard Elevation="2">
            <MudCardContent>
                <MudForm @ref="_form" @bind-IsValid="@_formValid">
                    <MudTextField @bind-Value="_model.Name" 
                                 Label="@Loc["ConnectionName"]" 
                                 Required="true"
                                 RequiredError="@Loc["ConnectionNameRequired"]"
                                 Variant="Variant.Outlined"
                                 Margin="Margin.Dense"
                                 Class="mb-4" />

                    <MudTextField @bind-Value="_model.Address" 
                                 Label="@Loc["XiaozhiWebSocketEndpoint"]" 
                                 Required="true"
                                 RequiredError="@Loc["XiaozhiWebSocketEndpointRequired"]"
                                 Variant="Variant.Outlined"
                                 Margin="Margin.Dense"
                                 HelperText="@Loc["WebSocketEndpointExample"]"
                                 Class="mb-4" />

                    <MudTextField @bind-Value="_model.Description" 
                                 Label="@Loc["Description"]" 
                                 Lines="3"
                                 Variant="Variant.Outlined"
                                 Margin="Margin.Dense"
                                 HelperText="@Loc["DescriptionOptional"]"
                                 Class="mb-4" />
                </MudForm>
            </MudCardContent>
            <MudCardActions>
                <MudButton Variant="Variant.Text" 
                          Color="Color.Default" 
                          OnClick="Cancel">
                    @Loc["Cancel"]
                </MudButton>
                <MudSpacer />
                <MudButton Variant="Variant.Filled" 
                          Color="Color.Primary" 
                          OnClick="SaveAsync" 
                          Disabled="@(!_formValid || _saving)"
                          StartIcon="@Icons.Material.Filled.Save">
                    @if (_saving)
                    {
                        <MudProgressCircular Class="mr-2" Size="Size.Small" Indeterminate="true" />
                        <MudText>@Loc["Saving"]</MudText>
                    }
                    else
                    {
                        <MudText>@Loc["Save"]</MudText>
                    }
                </MudButton>
            </MudCardActions>
        </MudCard>
    </MudItem>

    @if (_isEdit && _existingServer != null)
    {
        <MudItem xs="12" md="8" lg="6">
            <MudCard Elevation="2">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">@Loc["ConnectionInformation"]</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudGrid>
                        <MudItem xs="6">
                            <MudText Typo="Typo.body2" Color="Color.Secondary">@Loc["Created"]</MudText>
                            <MudText Typo="Typo.body1">@_existingServer.CreatedAt.ToString("MMM dd, yyyy HH:mm")</MudText>
                        </MudItem>
                        @if (_existingServer.UpdatedAt.HasValue)
                        {
                            <MudItem xs="6">
                                <MudText Typo="Typo.body2" Color="Color.Secondary">@Loc["LastUpdated"]</MudText>
                                <MudText Typo="Typo.body1">@_existingServer.UpdatedAt.Value.ToString("MMM dd, yyyy HH:mm")</MudText>
                            </MudItem>
                        }
                        <MudItem xs="12">
                            <MudText Typo="Typo.body2" Color="Color.Secondary">@Loc["Bindings"]</MudText>
                            <MudText Typo="Typo.body1">@string.Format(Loc["BindingsCountInfo"], _existingServer.ServiceBindings.Count)</MudText>
                        </MudItem>
                    </MudGrid>
                </MudCardContent>
            </MudCard>
        </MudItem>
    }
</MudGrid>

@code {
    [Parameter]
    public string? Id { get; set; }

    private MudForm _form = null!;
    private bool _formValid;
    private bool _saving;
    private bool _isEdit => !string.IsNullOrEmpty(Id);
    private XiaozhiConnectionDto? _existingServer;
    
    private ServerFormModel _model = new();

    protected override async Task OnInitializedAsync()
    {
        if (_isEdit)
        {
            await LoadServerAsync();
        }
    }

    private async Task LoadServerAsync()
    {
        try
        {
            _existingServer = await ServerService.GetServerAsync(Id!);
            if (_existingServer != null)
            {
                _model.Name = _existingServer.Name;
                _model.Address = _existingServer.Address;
                _model.Description = _existingServer.Description ?? string.Empty;
            }
            else
            {
                Snackbar.Add("Server not found", Severity.Error);
                Navigation.NavigateTo("/connections");
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading server: {ex.Message}", Severity.Error);
            Navigation.NavigateTo("/connections");
        }
    }

    private async Task SaveAsync()
    {
        if (!_formValid)
            return;

        try
        {
            _saving = true;

            if (_isEdit)
            {
                var request = new UpdateXiaozhiConnectionRequest
                {
                    Name = _model.Name,
                    Address = _model.Address,
                    Description = _model.Description
                };
                await ServerService.UpdateServerAsync(Id!, request);
                Snackbar.Add("Connection updated successfully", Severity.Success);
            }
            else
            {
                var request = new CreateXiaozhiConnectionRequest
                {
                    Name = _model.Name,
                    Address = _model.Address,
                    Description = _model.Description
                };
                await ServerService.CreateServerAsync(request);
                Snackbar.Add("Connection created successfully", Severity.Success);
            }

            Navigation.NavigateTo("/connections");
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error saving server: {ex.Message}", Severity.Error);
        }
        finally
        {
            _saving = false;
        }
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/connections");
    }

    private class ServerFormModel
    {
        public string Name { get; set; } = string.Empty;
        public string Address { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
    }
}
