@page "/connections/create"
@page "/connections/edit/{Id:int}"
@attribute [Authorize]
@inject IXiaozhiConnectionClientService ServerService
@inject ISnackbar Snackbar
@inject NavigationManager Navigation

<PageTitle>@(_isEdit ? "Edit" : "Create") Xiaozhi Connection - Verdure MCP Platform</PageTitle>

<MudGrid>
    <MudItem xs="12">
        <MudText Typo="Typo.h3" Class="mb-4">
            <MudIcon Icon="@(_isEdit ? Icons.Material.Filled.Edit : Icons.Material.Filled.Add)" Class="mr-2" />
            @(_isEdit ? "Edit" : "Create") Xiaozhi Connection
        </MudText>
    </MudItem>

    <MudItem xs="12" md="8" lg="6">
        <MudCard Elevation="2">
            <MudCardContent>
                <MudForm @ref="_form" @bind-IsValid="@_formValid">
                    <MudTextField @bind-Value="_model.Name" 
                                 Label="Connection Name" 
                                 Required="true"
                                 RequiredError="Connection Name is required"
                                 Variant="Variant.Outlined"
                                 Margin="Margin.Dense"
                                 Class="mb-4" />

                    <MudTextField @bind-Value="_model.Address" 
                                 Label="Xiaozhi WebSocket Endpoint" 
                                 Required="true"
                                 RequiredError="Xiaozhi WebSocket Endpoint is required"
                                 Variant="Variant.Outlined"
                                 Margin="Margin.Dense"
                                 HelperText="e.g., wss://api.xiaozhi.me/mcp/?token=YOUR_TOKEN"
                                 Class="mb-4" />

                    <MudTextField @bind-Value="_model.Description" 
                                 Label="Description" 
                                 Lines="3"
                                 Variant="Variant.Outlined"
                                 Margin="Margin.Dense"
                                 HelperText="Optional description for this Xiaozhi connection"
                                 Class="mb-4" />
                </MudForm>
            </MudCardContent>
            <MudCardActions>
                <MudButton Variant="Variant.Text" 
                          Color="Color.Default" 
                          OnClick="Cancel">
                    Cancel
                </MudButton>
                <MudSpacer />
                <MudButton Variant="Variant.Filled" 
                          Color="Color.Primary" 
                          OnClick="SaveAsync" 
                          Disabled="@(!_formValid || _saving)"
                          StartIcon="@Icons.Material.Filled.Save">
                    @if (_saving)
                    {
                        <MudProgressCircular Class="mr-2" Size="Size.Small" Indeterminate="true" />
                        <MudText>Saving...</MudText>
                    }
                    else
                    {
                        <MudText>Save</MudText>
                    }
                </MudButton>
            </MudCardActions>
        </MudCard>
    </MudItem>

    @if (_isEdit && _existingServer != null)
    {
        <MudItem xs="12" md="8" lg="6">
            <MudCard Elevation="2">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">Connection Information</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudGrid>
                        <MudItem xs="6">
                            <MudText Typo="Typo.body2" Color="Color.Secondary">Created</MudText>
                            <MudText Typo="Typo.body1">@_existingServer.CreatedAt.ToString("MMM dd, yyyy HH:mm")</MudText>
                        </MudItem>
                        @if (_existingServer.UpdatedAt.HasValue)
                        {
                            <MudItem xs="6">
                                <MudText Typo="Typo.body2" Color="Color.Secondary">Last Updated</MudText>
                                <MudText Typo="Typo.body1">@_existingServer.UpdatedAt.Value.ToString("MMM dd, yyyy HH:mm")</MudText>
                            </MudItem>
                        }
                        <MudItem xs="12">
                            <MudText Typo="Typo.body2" Color="Color.Secondary">Bindings</MudText>
                            <MudText Typo="Typo.body1">@_existingServer.ServiceBindings.Count binding(s)</MudText>
                        </MudItem>
                    </MudGrid>
                </MudCardContent>
            </MudCard>
        </MudItem>
    }
</MudGrid>

@code {
    [Parameter]
    public int Id { get; set; }

    private MudForm _form = null!;
    private bool _formValid;
    private bool _saving;
    private bool _isEdit => Id > 0;
    private XiaozhiConnectionDto? _existingServer;
    
    private ServerFormModel _model = new();

    protected override async Task OnInitializedAsync()
    {
        if (_isEdit)
        {
            await LoadServerAsync();
        }
    }

    private async Task LoadServerAsync()
    {
        try
        {
            _existingServer = await ServerService.GetServerAsync(Id);
            if (_existingServer != null)
            {
                _model.Name = _existingServer.Name;
                _model.Address = _existingServer.Address;
                _model.Description = _existingServer.Description ?? string.Empty;
            }
            else
            {
                Snackbar.Add("Server not found", Severity.Error);
                Navigation.NavigateTo("/connections");
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading server: {ex.Message}", Severity.Error);
            Navigation.NavigateTo("/connections");
        }
    }

    private async Task SaveAsync()
    {
        if (!_formValid)
            return;

        try
        {
            _saving = true;

            if (_isEdit)
            {
                var request = new UpdateXiaozhiConnectionRequest
                {
                    Name = _model.Name,
                    Address = _model.Address,
                    Description = _model.Description
                };
                await ServerService.UpdateServerAsync(Id, request);
                Snackbar.Add("Connection updated successfully", Severity.Success);
            }
            else
            {
                var request = new CreateXiaozhiConnectionRequest
                {
                    Name = _model.Name,
                    Address = _model.Address,
                    Description = _model.Description
                };
                await ServerService.CreateServerAsync(request);
                Snackbar.Add("Connection created successfully", Severity.Success);
            }

            Navigation.NavigateTo("/connections");
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error saving server: {ex.Message}", Severity.Error);
        }
        finally
        {
            _saving = false;
        }
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/connections");
    }

    private class ServerFormModel
    {
        public string Name { get; set; } = string.Empty;
        public string Address { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
    }
}
